diff -Naur boost_1_43_0/Makefile boost_1_43_0.nacl/Makefile
--- boost_1_43_0/Makefile	1969-12-31 17:00:00.000000000 -0700
+++ boost_1_43_0.nacl/Makefile	2010-05-18 18:49:11.000000000 -0600
@@ -0,0 +1,18 @@
+CXXFLAGS = -c -pthread
+DEFINES = \
+		  -DBOOST_HAS_GETTIMEOFDAY \
+		  -DBOOST_HAS_PTHREADS \
+		  -DBOOST_PARAMETER_MAX_ARITY=7 \
+		  -DPHOENIX_LIMIT=6
+	
+INCLUDE = -I./
+
+all:
+	$(CXX) $(CXXFLAGS) $(INCLUDE) $(DEFINES) test.cpp
+
+install:
+	@echo Installing boost
+
+clean:
+	@echo clean boost
+	rm -f *.o
diff -Naur boost_1_43_0/boost/smart_ptr/detail/yield_k.hpp boost_1_43_0.nacl/boost/smart_ptr/detail/yield_k.hpp
--- boost_1_43_0/boost/smart_ptr/detail/yield_k.hpp	2009-03-02 09:22:16.000000000 -0700
+++ boost_1_43_0.nacl/boost/smart_ptr/detail/yield_k.hpp	2010-05-18 18:49:11.000000000 -0600
@@ -111,6 +111,7 @@
     }
     else
     {
+#if 0
         // g++ -Wextra warns on {} or {0}
         struct timespec rqtp = { 0, 0 };
 
@@ -121,6 +122,9 @@
         rqtp.tv_nsec = 1000;
 
         nanosleep( &rqtp, 0 );
+#else
+       sleep(0.00001);
+#endif
     }
 }
 
diff -Naur boost_1_43_0/boost/thread/pthread/condition_variable.hpp boost_1_43_0.nacl/boost/thread/pthread/condition_variable.hpp
--- boost_1_43_0/boost/thread/pthread/condition_variable.hpp	2010-04-01 09:04:15.000000000 -0600
+++ boost_1_43_0.nacl/boost/thread/pthread/condition_variable.hpp	2010-05-18 18:50:24.000000000 -0600
@@ -23,7 +23,7 @@
     inline bool condition_variable::timed_wait(unique_lock<mutex>& m,boost::system_time const& wait_until)
     {
         detail::interruption_checker check_for_interruption(&cond);
-        struct timespec const timeout=detail::get_timespec(wait_until);
+        struct timespec timeout=detail::get_timespec(wait_until);
         int const cond_res=pthread_cond_timedwait(&cond,m.mutex()->native_handle(),&timeout);
         if(cond_res==ETIMEDOUT)
         {
diff -Naur boost_1_43_0/boost/thread/pthread/mutex.hpp boost_1_43_0.nacl/boost/thread/pthread/mutex.hpp
--- boost_1_43_0/boost/thread/pthread/mutex.hpp	2010-04-01 09:04:15.000000000 -0600
+++ boost_1_43_0.nacl/boost/thread/pthread/mutex.hpp	2010-05-18 18:50:05.000000000 -0600
@@ -182,7 +182,7 @@
 
         bool timed_lock(system_time const & abs_time)
         {
-            struct timespec const timeout=detail::get_timespec(abs_time);
+            struct timespec timeout=detail::get_timespec(abs_time);
             boost::pthread::pthread_mutex_scoped_lock const local_lock(&m);
             while(is_locked)
             {
diff -Naur boost_1_43_0/boost/thread/pthread/recursive_mutex.hpp boost_1_43_0.nacl/boost/thread/pthread/recursive_mutex.hpp
--- boost_1_43_0/boost/thread/pthread/recursive_mutex.hpp	2010-04-01 09:04:15.000000000 -0600
+++ boost_1_43_0.nacl/boost/thread/pthread/recursive_mutex.hpp	2010-05-18 18:50:40.000000000 -0600
@@ -232,7 +232,7 @@
 
         bool timed_lock(system_time const & abs_time)
         {
-            struct timespec const timeout=detail::get_timespec(abs_time);
+            struct timespec timeout=detail::get_timespec(abs_time);
             boost::pthread::pthread_mutex_scoped_lock const local_lock(&m);
             if(is_locked && pthread_equal(owner,pthread_self()))
             {
diff -Naur boost_1_43_0/test.cpp boost_1_43_0.nacl/test.cpp
--- boost_1_43_0/test.cpp	1969-12-31 17:00:00.000000000 -0700
+++ boost_1_43_0.nacl/test.cpp	2010-05-18 18:49:11.000000000 -0600
@@ -0,0 +1,115 @@
+#include <boost/aligned_storage.hpp>
+#include <boost/any.hpp>
+#include <boost/array.hpp>
+#include <boost/assert.hpp>
+#include <boost/assign.hpp>
+#include <boost/bimap.hpp>
+#include <boost/bind.hpp>
+#include <boost/blank.hpp>
+#include <boost/blank_fwd.hpp>
+#include <boost/call_traits.hpp>
+#include <boost/cast.hpp>
+#include <boost/cerrno.hpp>
+#include <boost/checked_delete.hpp>
+#include <boost/circular_buffer.hpp>
+#include <boost/circular_buffer_fwd.hpp>
+#include <boost/compressed_pair.hpp>
+#include <boost/concept_archetype.hpp>
+#include <boost/concept_check.hpp>
+#include <boost/config.hpp>
+#include <boost/crc.hpp>
+#include <boost/cregex.hpp>
+#include <boost/cstdint.hpp>
+#include <boost/cstdlib.hpp>
+#include <boost/current_function.hpp>
+#include <boost/date_time.hpp>
+#include <boost/dynamic_bitset.hpp>
+#include <boost/dynamic_bitset_fwd.hpp>
+#include <boost/enable_shared_from_this.hpp>
+#include <boost/exception/all.hpp>
+#include <boost/exception_ptr.hpp>
+#include <boost/filesystem.hpp>
+#include <boost/flyweight.hpp>
+#include <boost/foreach.hpp>
+#include <boost/format.hpp>
+#include <boost/function.hpp>
+#include <boost/function_equal.hpp>
+#include <boost/function_output_iterator.hpp>
+#include <boost/functional.hpp>
+#include <boost/generator_iterator.hpp>
+#include <boost/get_pointer.hpp>
+#include <boost/implicit_cast.hpp>
+#include <boost/indirect_reference.hpp>
+#include <boost/integer.hpp>
+#include <boost/integer_fwd.hpp>
+#include <boost/integer_traits.hpp>
+#include <boost/intrusive_ptr.hpp>
+#include <boost/io_fwd.hpp>
+#include <boost/is_placeholder.hpp>
+#include <boost/iterator.hpp>
+#include <boost/iterator_adaptors.hpp>
+#include <boost/last_value.hpp>
+#include <boost/lexical_cast.hpp>
+#include <boost/limits.hpp>
+#include <boost/make_shared.hpp>
+#include <boost/math_fwd.hpp>
+#include <boost/mem_fn.hpp>
+#include <boost/memory_order.hpp>
+#include <boost/multi_array.hpp>
+#include <boost/multi_index_container.hpp>
+#include <boost/multi_index_container_fwd.hpp>
+#include <boost/next_prior.hpp>
+#include <boost/non_type.hpp>
+#include <boost/noncopyable.hpp>
+#include <boost/nondet_random.hpp>
+#include <boost/none.hpp>
+#include <boost/none_t.hpp>
+#include <boost/operators.hpp>
+#include <boost/optional.hpp>
+#include <boost/parameter.hpp>
+#include <boost/pointee.hpp>
+#include <boost/pointer_cast.hpp>
+#include <boost/pointer_to_other.hpp>
+#include <boost/preprocessor.hpp>
+#include <boost/program_options.hpp>
+#include <boost/progress.hpp>
+#include <boost/random.hpp>
+#include <boost/range.hpp>
+#include <boost/rational.hpp>
+#include <boost/ref.hpp>
+#include <boost/regex.hpp>
+#include <boost/regex_fwd.hpp>
+#include <boost/scope_exit.hpp>
+#include <boost/scoped_array.hpp>
+#include <boost/scoped_ptr.hpp>
+#include <boost/shared_array.hpp>
+#include <boost/shared_container_iterator.hpp>
+#include <boost/shared_ptr.hpp>
+#include <boost/signal.hpp>
+#include <boost/signals.hpp>
+#include <boost/signals2.hpp>
+#include <boost/smart_ptr.hpp>
+#include <boost/spirit/include/classic.hpp>
+#include <boost/static_assert.hpp>
+#include <boost/strong_typedef.hpp>
+#include <boost/swap.hpp>
+#include <boost/thread.hpp>
+#include <boost/throw_exception.hpp>
+#include <boost/timer.hpp>
+#include <boost/token_functions.hpp>
+#include <boost/token_iterator.hpp>
+#include <boost/tokenizer.hpp>
+#include <boost/type.hpp>
+#include <boost/type_traits.hpp>
+#include <boost/unordered_map.hpp>
+#include <boost/unordered_set.hpp>
+#include <boost/utility.hpp>
+#include <boost/variant.hpp>
+#include <boost/version.hpp>
+#include <boost/visit_each.hpp>
+#include <boost/wave.hpp>
+#include <boost/weak_ptr.hpp>
+
+int main(int argc, char* argv[]) {
+  return 0;
+}
