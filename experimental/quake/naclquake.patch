diff -Naur sdlquake-1.0.9/cd_nacl.c naclquake/cd_nacl.c
--- sdlquake-1.0.9/cd_nacl.c	1969-12-31 17:00:00.000000000 -0700
+++ naclquake/cd_nacl.c	2011-04-13 14:34:49.000000000 -0600
@@ -0,0 +1,29 @@
+/*
+  The NaCl version of Quake does not support CDAudio, so just provide stubs
+*/
+
+
+#include "quakedef.h"
+
+void CDAudio_Stop() {
+}
+
+void CDAudio_Pause() {
+}
+
+void CDAudio_Resume() {
+}
+
+void CDAudio_Update() {
+}
+
+void CDAudio_Play(byte track, qboolean looping) {
+}
+
+int CDAudio_Init() {
+  return -1;
+}
+
+void CDAudio_Shutdown() {
+}
+
diff -Naur sdlquake-1.0.9/d_ifacea.h naclquake/d_ifacea.h
--- sdlquake-1.0.9/d_ifacea.h	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/d_ifacea.h	2011-04-13 14:34:49.000000000 -0600
@@ -38,7 +38,7 @@
 #define	CYCLE	128
 
 // !!! if this is changed, it must be changed in r_shared.h too !!!
-#define	MAXHEIGHT	1024
+#define	MAXHEIGHT	2048
 
 // !!! if this is changed, it must be changed in quakedef.h too !!!
 #define CACHE_SIZE	32		// used to align key data structures
diff -Naur sdlquake-1.0.9/net_dgrm.c naclquake/net_dgrm.c
--- sdlquake-1.0.9/net_dgrm.c	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/net_dgrm.c	2011-04-13 14:34:50.000000000 -0600
@@ -19,6 +19,11 @@
 */
 // net_dgrm.c
 
+#include "quakedef.h"
+
+//#define HAVE_NET_DGRM
+#if defined(HAVE_NET_DGRM)
+
 // This is enables a simple IP banning mechanism
 #define BAN_TEST
 
@@ -52,7 +57,6 @@
 #endif
 #endif	// BAN_TEST
 
-#include "quakedef.h"
 #include "net_dgrm.h"
 
 // these two macros are to make the code more readable
@@ -1388,3 +1392,53 @@
 				break;
 	return ret;
 }
+#else
+
+int Datagram_Init (void) {
+  return -1;
+}
+
+void Datagram_Listen (qboolean state) {
+}
+
+void Datagram_SearchForHosts (qboolean xmit) {
+}
+
+qsocket_t *Datagram_Connect (char *host) {
+  return NULL;
+}
+
+qsocket_t *Datagram_CheckNewConnections (void) {
+  return NULL;
+}
+
+int	Datagram_GetMessage (qsocket_t *sock) {
+  return -1;
+}
+
+int Datagram_SendMessage (qsocket_t *sock, sizebuf_t *data) {
+  return -1;
+}
+
+int Datagram_SendUnreliableMessage (qsocket_t *sock, sizebuf_t *data) {
+  return -1;
+}
+
+qboolean Datagram_CanSendMessage (qsocket_t *sock) {
+  return 0;
+}
+
+qboolean Datagram_CanSendUnreliableMessage (qsocket_t *sock)
+{
+	return false;
+}
+
+void Datagram_Close (qsocket_t *sock) {
+}
+
+void Datagram_Shutdown (void) {
+}
+
+
+#endif
+
diff -Naur sdlquake-1.0.9/net_udp.c naclquake/net_udp.c
--- sdlquake-1.0.9/net_udp.c	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/net_udp.c	2011-04-13 14:34:50.000000000 -0600
@@ -19,9 +19,13 @@
 */
 // net_udp.c
 
-#include "quakedef.h"
+//#define HAVE_NET_UDP
 
+#include "quakedef.h"
 #include <sys/types.h>
+
+#if defined(HAVE_NET_UDP)
+
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <netdb.h>
@@ -413,3 +417,81 @@
 }
 
 //=============================================================================
+
+#else
+
+int UDP_Init (void) {
+  return -1;
+}
+
+void UDP_Shutdown (void) {
+}
+
+void UDP_Listen (qboolean state) {
+}
+
+int UDP_OpenSocket (int port) {
+  return -1;
+}
+
+int UDP_CloseSocket (int socket) {
+  return -1;
+}
+
+int UDP_Connect (int socket, struct qsockaddr *addr) {
+  return 0;
+}
+
+int UDP_CheckNewConnections (void) {
+  return -1;
+}
+
+int UDP_Read (int socket, byte *buf, int len, struct qsockaddr *addr) {
+  return -1;
+}
+
+int UDP_MakeSocketBroadcastCapable (int socket) {
+  return -1;
+}
+
+int UDP_Broadcast (int socket, byte *buf, int len) {
+  return -1;
+}
+
+int UDP_Write (int socket, byte *buf, int len, struct qsockaddr *addr) {
+  return -1;
+}
+
+char *UDP_AddrToString (struct qsockaddr *addr) {
+  return NULL;
+}
+
+int UDP_StringToAddr (char *string, struct qsockaddr *addr) {
+  return -1;
+}
+
+int UDP_GetSocketAddr (int socket, struct qsockaddr *addr) {
+  return -1;
+}
+
+int UDP_GetNameFromAddr (struct qsockaddr *addr, char *name) {
+  return -1;
+}
+
+int UDP_GetAddrFromName(char *name, struct qsockaddr *addr) {
+  return -1;
+}
+
+int UDP_AddrCompare (struct qsockaddr *addr1, struct qsockaddr *addr2) {
+  return -1;
+}
+
+int UDP_GetSocketPort (struct qsockaddr *addr) {
+  return -1;
+}
+
+int UDP_SetSocketPort (struct qsockaddr *addr, int port) {
+  return 0;
+}
+
+#endif
diff -Naur sdlquake-1.0.9/quakedef.h naclquake/quakedef.h
--- sdlquake-1.0.9/quakedef.h	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/quakedef.h	2011-04-13 14:34:47.000000000 -0600
@@ -334,3 +334,5 @@
 void Chase_Init (void);
 void Chase_Reset (void);
 void Chase_Update (void);
+
+
diff -Naur sdlquake-1.0.9/r_local.h naclquake/r_local.h
--- sdlquake-1.0.9/r_local.h	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/r_local.h	2011-04-13 14:34:50.000000000 -0600
@@ -313,4 +313,5 @@
 void R_SplitEntityOnNode2 (mnode_t *node);
 void R_MarkLights (dlight_t *light, int bit, mnode_t *node);
 
-#endif
\ No newline at end of file
+#endif
+
diff -Naur sdlquake-1.0.9/r_shared.h naclquake/r_shared.h
--- sdlquake-1.0.9/r_shared.h	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/r_shared.h	2011-04-13 14:34:47.000000000 -0600
@@ -30,8 +30,8 @@
 #define MAXWORKINGVERTS	(MAXVERTS+4)	// max points in an intermediate
 										//  polygon (while processing)
 // !!! if this is changed, it must be changed in d_ifacea.h too !!!
-#define	MAXHEIGHT		1024
-#define	MAXWIDTH		1280
+#define	MAXHEIGHT		2048
+#define	MAXWIDTH		4096
 #define MAXDIMENSION	((MAXHEIGHT > MAXWIDTH) ? MAXHEIGHT : MAXWIDTH)
 
 #define SIN_BUFFER_SIZE	(MAXDIMENSION+CYCLE)
diff -Naur sdlquake-1.0.9/snd_dummy.c naclquake/snd_dummy.c
--- sdlquake-1.0.9/snd_dummy.c	1969-12-31 17:00:00.000000000 -0700
+++ naclquake/snd_dummy.c	2011-04-13 14:34:51.000000000 -0600
@@ -0,0 +1,29 @@
+
+#include <stdio.h>
+#include "SDL_audio.h"
+#include "SDL_byteorder.h"
+#include "quakedef.h"
+
+static dma_t the_shm;
+static int snd_inited;
+
+extern int desired_speed;
+extern int desired_bits;
+
+static void paint_audio(void *unused, Uint8 *stream, int len)
+{}
+
+qboolean SNDDMA_Init(void)
+{
+	return 1;
+}
+
+int SNDDMA_GetDMAPos(void)
+{
+	return 0;
+}
+
+void SNDDMA_Shutdown(void)
+{
+}
+
diff -Naur sdlquake-1.0.9/sound.h naclquake/sound.h
--- sdlquake-1.0.9/sound.h	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/sound.h	2011-04-13 14:34:48.000000000 -0600
@@ -164,7 +164,7 @@
 extern int		snd_blocked;
 
 void S_LocalSound (char *s);
-sfxcache_t *S_LoadSound (sfx_t *s);
+sfxcache_t *S_LoadSound (sfx_t *s, int main_thread);
 
 wavinfo_t GetWavinfo (char *name, byte *wav, int wavlength);
 
diff -Naur sdlquake-1.0.9/sys_nacl.c naclquake/sys_nacl.c
--- sdlquake-1.0.9/sys_nacl.c	1969-12-31 17:00:00.000000000 -0700
+++ naclquake/sys_nacl.c	2011-04-13 14:34:48.000000000 -0600
@@ -0,0 +1,400 @@
+#include <unistd.h>
+#include <signal.h>
+#include <stdlib.h>
+#include <limits.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <ctype.h>
+#include <errno.h>
+#ifndef __WIN32__
+//#include <sys/ipc.h>
+//#include <sys/shm.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+//#include <sys/mman.h>
+#endif
+
+#include "quakedef.h"
+
+//#define HAVE_SDL_DELAY
+//#define HAVE_MKDIR
+
+qboolean			isDedicated;
+
+int noconinput = 0;
+
+char *basedir = ".";
+char *cachedir = "";
+
+cvar_t  sys_linerefresh = {"sys_linerefresh","0"};// set for entity display
+cvar_t  sys_nostdout = {"sys_nostdout","0"};
+
+extern int nacl_file_length(int fd);
+extern int nacl_file_write(int, void*, size_t);
+
+// =======================================================================
+// General routines
+// =======================================================================
+
+void Sys_DebugNumber(int y, int val)
+{
+}
+
+void Sys_Printf (char *fmt, ...)
+{
+	va_list		argptr;
+	char		text[1024];
+	
+	va_start (argptr,fmt);
+	vsprintf (text,fmt,argptr);
+	va_end (argptr);
+	fprintf(stderr, "%s", text);
+	
+	//Con_Print (text);
+}
+
+void Sys_Quit (void)
+{
+	Host_Shutdown();
+	exit(0);
+}
+
+void Sys_Init(void)
+{
+#if id386
+	Sys_SetFPCW();
+#endif
+}
+
+#if !id386
+
+/*
+================
+Sys_LowFPPrecision
+================
+*/
+void Sys_LowFPPrecision (void)
+{
+// causes weird problems on Nextstep
+}
+
+
+/*
+================
+Sys_HighFPPrecision
+================
+*/
+void Sys_HighFPPrecision (void)
+{
+// causes weird problems on Nextstep
+}
+
+#endif	// !id386
+
+
+void Sys_Error (char *error, ...)
+{ 
+    va_list     argptr;
+    char        string[1024];
+
+    va_start (argptr,error);
+    vsprintf (string,error,argptr);
+    va_end (argptr);
+	fprintf(stderr, "Error: %s\n", string);
+
+	Host_Shutdown ();
+	exit (1);
+
+} 
+
+void Sys_Warn (char *warning, ...)
+{ 
+    va_list     argptr;
+    char        string[1024];
+    
+    va_start (argptr,warning);
+    vsprintf (string,warning,argptr);
+    va_end (argptr);
+	fprintf(stderr, "Warning: %s", string);
+} 
+
+/*
+===============================================================================
+
+FILE IO
+
+===============================================================================
+*/
+
+int Sys_FileOpenRead (char *path, int *hndl)
+{
+	int fd = open(path, O_RDONLY);
+	if (fd == -1)
+	{
+		*hndl = -1;
+		return -1;
+	}
+	*hndl = fd; 
+	return nacl_file_length(fd);
+}
+
+int Sys_FileOpenWrite (char *path)
+{
+	return open(path, O_WRONLY|O_APPEND|O_CREAT);
+}
+
+void Sys_FileClose (int handle)
+{
+	close(handle);
+}
+
+void Sys_FileSeek (int handle, int position)
+{
+	if ( handle >= 0 ) {
+		lseek (handle, position, SEEK_SET);
+	}
+}
+
+int Sys_FileRead (int handle, void *dst, int count)
+{
+	return read(handle, dst, count);
+}
+
+int Sys_FileWrite (int handle, void *src, int count)
+{
+	// UNTESTED, probably doesn't work.  At best, saves in a pretend file
+	// in memory.
+	return nacl_file_write(handle, src, count);
+}
+
+int	Sys_FileTime (char *path)
+{
+	FILE	*f;
+	
+	f = fopen(path, "rb");
+	if (f)
+	{
+		fclose(f);
+		return 1;
+	}
+	
+	return -1;
+}
+
+void Sys_mkdir (char *path)
+{
+#if defined (HAVE_MKDIR)
+
+#ifdef __WIN32__
+    mkdir (path);
+#else
+    mkdir (path, 0777);
+#endif
+
+#endif
+}
+
+void Sys_DebugLog(char *file, char *fmt, ...)
+{
+    va_list argptr; 
+    static char data[1024];
+    FILE *fp;
+    
+    va_start(argptr, fmt);
+    vsprintf(data, fmt, argptr);
+    va_end(argptr);
+    fp = fopen(file, "a");
+    fwrite(data, strlen(data), 1, fp);
+    fclose(fp);
+}
+
+double Sys_FloatTime (void)
+{
+#ifdef __WIN32__
+
+	static int starttime = 0;
+
+	if ( ! starttime )
+		starttime = clock();
+
+	return (clock()-starttime)*1.0/1024;
+
+#else
+
+    struct timeval tp;
+    struct timezone tzp; 
+    static int      secbase; 
+    
+    gettimeofday(&tp, &tzp);  
+
+    if (!secbase)
+    {
+        secbase = tp.tv_sec;
+        return tp.tv_usec/1000000.0;
+    }
+
+    return (tp.tv_sec - secbase) + tp.tv_usec/1000000.0;
+
+#endif
+}
+
+// =======================================================================
+// Sleeps for microseconds
+// =======================================================================
+
+static volatile int oktogo;
+
+void alarm_handler(int x)
+{
+	oktogo=1;
+}
+
+byte *Sys_ZoneBase (int *size)
+{
+
+	char *QUAKEOPT = getenv("QUAKEOPT");
+
+	*size = 0xc00000;
+	if (QUAKEOPT)
+	{
+		while (*QUAKEOPT)
+			if (tolower(*QUAKEOPT++) == 'm')
+			{
+				*size = atof(QUAKEOPT) * 1024*1024;
+				break;
+			}
+	}
+	return malloc (*size);
+
+}
+
+void Sys_LineRefresh(void)
+{
+}
+
+void Sys_Sleep(void)
+{
+#if defined(HAVE_SDL_DELAY)
+	SDL_Delay(1);
+#else
+	extern int sched_yield(void);
+	sched_yield();
+#if 0
+        {
+          int i;
+	  for (i = 0; i < 10000; i++) ;
+        }
+#endif
+#endif
+}
+
+void floating_point_exception_handler(int whatever)
+{
+//	Sys_Warn("floating point exception\n");
+	signal(SIGFPE, floating_point_exception_handler);
+}
+
+void moncontrol(int x)
+{
+}
+
+extern int quake_main (int c, char **v)
+{
+
+	double		time, oldtime, newtime;
+	quakeparms_t parms;
+	extern int vcrFile;
+	extern int recording;
+	static int frame;
+
+	moncontrol(0);
+
+//	signal(SIGFPE, floating_point_exception_handler);
+	signal(SIGFPE, SIG_IGN);
+
+	parms.memsize = 32*1024*1024;
+	parms.membase = malloc (parms.memsize);
+	parms.basedir = basedir;
+	parms.cachedir = cachedir;
+
+	COM_InitArgv(c, v);
+	parms.argc = com_argc;
+	parms.argv = com_argv;
+
+	Sys_Init();
+
+    Host_Init(&parms);
+
+	Cvar_RegisterVariable (&sys_nostdout);
+
+    oldtime = Sys_FloatTime () - 0.1;
+    while (1)
+    {
+// find time spent rendering last frame
+        newtime = Sys_FloatTime ();
+        time = newtime - oldtime;
+
+        if (cls.state == ca_dedicated)
+        {   // play vcrfiles at max speed
+            if (time < sys_ticrate.value && (vcrFile == -1 || recording) )
+            {
+                Sys_Sleep ();
+                continue;       // not time to run a server only tic yet
+            }
+            time = sys_ticrate.value;
+        }
+
+        if (time > sys_ticrate.value*2)
+            oldtime = newtime;
+        else
+            oldtime += time;
+
+        if (++frame > 10)
+            moncontrol(1);      // profile only while we do each Quake frame
+        Host_Frame (time);
+        moncontrol(0);
+
+// graphic debugging aids
+        if (sys_linerefresh.value)
+            Sys_LineRefresh ();
+    }
+
+}
+
+
+#if 0
+
+/*
+ * we certainly can't have this in NaCl(!)  Fortunately it doesn't appear to be used anymore.
+ */
+
+/*
+================
+Sys_MakeCodeWriteable
+================
+*/
+
+void Sys_MakeCodeWriteable (unsigned long startaddr, unsigned long length)
+{
+
+	int r;
+	unsigned long addr;
+	int psize = getpagesize();
+
+	fprintf(stderr, "writable code %lx-%lx\n", startaddr, startaddr+length);
+
+	addr = startaddr & ~(psize-1);
+
+	r = mprotect((char*)addr, length + startaddr - addr, 7);
+
+	if (r < 0)
+    		Sys_Error("Protection change failed\n");
+
+}
+
+#endif
diff -Naur sdlquake-1.0.9/vid_sdl.c naclquake/vid_sdl.c
--- sdlquake-1.0.9/vid_sdl.c	2011-04-13 14:36:08.000000000 -0600
+++ naclquake/vid_sdl.c	2011-04-13 15:54:50.000000000 -0600
@@ -11,8 +11,9 @@
 //#define    BASEWIDTH    320
 //#define    BASEHEIGHT   200
 // Much better for high resolution displays
-#define    BASEWIDTH    (320*2)
-#define    BASEHEIGHT   (200*2)
+#define    BASEWIDTH    800
+#define    BASEHEIGHT   600
+
 
 int    VGA_width, VGA_height, VGA_rowbytes, VGA_bufferrowbytes = 0;
 byte    *VGA_pagebase;
@@ -56,9 +57,10 @@
     Uint32 flags;
 
     // Load the SDL library
-    if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_AUDIO|SDL_INIT_CDROM) < 0)
+    // In the NaCl port, SDL is initialized in quake_instance.cc
+/*    if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_AUDIO|SDL_INIT_CDROM) < 0)
         Sys_Error("VID: Couldn't load SDL: %s", SDL_GetError());
-
+*/
     // Set up display mode (width and height)
     vid.width = BASEWIDTH;
     vid.height = BASEHEIGHT;
