Index: src/x64/codegen-x64.cc
===================================================================
--- src/x64/codegen-x64.cc	(revision 4925)
+++ src/x64/codegen-x64.cc	(working copy)
@@ -10446,7 +10446,7 @@
         Label not_floats;
         // rax: y
         // rdx: x
-        ASSERT(!static_operands_type_.IsSmi());
+        // ASSERT(!static_operands_type_.IsSmi());
         if (static_operands_type_.IsNumber()) {
           if (FLAG_debug_code) {
             // Assert at runtime that inputs are only numbers.
Index: SConstruct
===================================================================
--- SConstruct	(revision 4925)
+++ SConstruct	(working copy)
@@ -300,7 +300,6 @@
   'gcc': {
     'all': {
       'WARNINGFLAGS': ['-Wall',
-                       '-Werror',
                        '-W',
                        '-Wno-unused-parameter',
                        '-Wnon-virtual-dtor']
Index: run.sh
===================================================================
--- run.sh	(revision 0)
+++ run.sh	(revision 0)
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+TESTMODE="shell"
+MODE="debug"
+VERBOSE="off"
+ARCH="x64"
+OS=""
+V8="v8_g"
+V8_SHELL="shell_g"
+
+if [[ "$(uname -s)" == "Linux" ]]
+then
+  OS="linux"
+elif [[ "$(uname -s)" == "Darwin" ]]
+then
+  OS="macos"
+else
+  echo Unknown OS: $(uname -s)
+  exit 1
+fi
+
+while ! test -z "$1"
+do
+  case "$1" in
+
+    sunspider)
+      TESTMODE="sunspider"
+    ;;
+
+    benchmark)
+      TESTMODE="benchmark"
+    ;;
+
+    test)
+      TESTMODE="test"
+    ;;
+
+    release)
+      MODE="release"
+      V8="v8"
+      V8_SHELL="shell"
+    ;;
+
+    native)
+    ;;
+
+    *)
+      echo Unknown option: "$1" >&2
+      exit 1
+    ;;
+  esac
+  shift
+done
+
+SCONSFLAGS="mode=$MODE sample=shell verbose=$VERBOSE arch=$ARCH os=$OS -j2"
+TESTFLAGS="--report --time --mode=$MODE --arch=$ARCH -S verbose=$VERBOSE -S os=$OS -S -j2 es5conform message cctest mozilla mjsunit"
+
+function run() {
+  echo "$@" >&2
+  eval "( $@ )" || exit 1
+}
+
+case "$TESTMODE" in
+
+  shell)
+    run scons $SCONSFLAGS
+  ;;
+
+  test)
+    run ./tools/test.py $TESTFLAGS
+  ;;
+
+  benchmark)
+    run scons $SCONSFLAGS
+    run "cd benchmarks && ../$V8_SHELL run.js"
+  ;;
+
+  sunspider)
+    run scons $SCONSFLAGS
+    cat > SunSpider/v8 << EOF
+#!/bin/sh
+export NACLDYNCODE="1"
+export NACL_DANGEROUS_ENABLE_FILE_ACCESS="1"
+export NACL_ALLOW_DYNCODE_REPLACEMENT="1"
+echo ../$V8_SHELL --expose-gc \$@ >&2
+exec ../$V8_SHELL --expose-gc \$@
+EOF
+    chmod +x SunSpider/v8
+    run "cd SunSpider && perl sunspider --runs 1 --shell ./v8"
+  ;;
+
+esac
