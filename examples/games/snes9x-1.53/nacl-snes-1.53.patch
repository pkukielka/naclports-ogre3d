diff -Nru snes9x-1.53-src/controls.cpp snes9x/controls.cpp
--- snes9x-1.53-src/controls.cpp	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/controls.cpp	2012-01-20 02:47:19.880978090 -0800
@@ -2516,6 +2516,7 @@
 						break;
 
 					case SeekToFrame:
+#ifndef __native_client__
 						if (S9xMovieActive())
 						{
 							sprintf(buf, "Select frame number (current: %d)", S9xMovieGetFrameCounter());
@@ -2530,6 +2531,7 @@
 								Settings.HighSpeedSeek = distance;
 							}
 						}
+#endif
 
 						break;
 
diff -Nru snes9x-1.53-src/movie.cpp snes9x/movie.cpp
--- snes9x-1.53-src/movie.cpp	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/movie.cpp	2012-01-20 02:47:19.880978090 -0800
@@ -550,7 +550,9 @@
 		return;
 
 	int	ignore;
+#ifndef __native_client__
 	ignore = ftruncate(fileno(Movie.File), Movie.ControllerDataOffset + Movie.BytesPerSample * (Movie.MaxSample + 1));
+#endif
 }
 
 static int read_movie_header (FILE *fd, SMovie *movie)
diff -Nru snes9x-1.53-src/port.h snes9x/port.h
--- snes9x-1.53-src/port.h	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/port.h	2012-01-20 02:47:19.900978594 -0800
@@ -182,7 +182,11 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <limits.h>
+
+#ifndef __native_client__
 #include <memory.h>
+#endif
+
 #include <time.h>
 #include <string.h>
 #ifdef HAVE_STRINGS_H
@@ -331,7 +335,7 @@
 #define TITLE "Snes9x"
 #endif
 
-#if defined(__i386__) || defined(__i486__) || defined(__i586__) || defined(__i686__) || defined(__x86_64__) || defined(__alpha__) || defined(__MIPSEL__) || defined(_M_IX86) || defined(_M_X64)
+#if defined(__i386__) || defined(__i486__) || defined(__i586__) || defined(__i686__) || defined(__x86_64__) || defined(__alpha__) || defined(__MIPSEL__) || defined(_M_IX86) || defined(_M_X64) || defined(__pnacl__)
 #define LSB_FIRST
 #define FAST_LSB_WORD_ACCESS
 #else
diff -Nru snes9x-1.53-src/unix/Makefile.in snes9x/unix/Makefile.in
--- snes9x-1.53-src/unix/Makefile.in	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/unix/Makefile.in	2012-05-03 16:53:54.000000000 +0800
@@ -7,7 +7,7 @@
 OS         = `uname -s -r -m|sed \"s/ /-/g\"|tr \"[A-Z]\" \"[a-z]\"|tr \"/()\" \"___\"`
 BUILDDIR   = .
 
-OBJECTS    = ../apu/apu.o ../apu/SNES_SPC.o ../apu/SNES_SPC_misc.o ../apu/SNES_SPC_state.o ../apu/SPC_DSP.o ../apu/SPC_Filter.o ../bsx.o ../c4.o ../c4emu.o ../cheats.o ../cheats2.o ../clip.o ../conffile.o ../controls.o ../cpu.o ../cpuexec.o ../cpuops.o ../crosshairs.o ../dma.o ../dsp.o ../dsp1.o ../dsp2.o ../dsp3.o ../dsp4.o ../fxinst.o ../fxemu.o ../gfx.o ../globals.o ../logger.o ../memmap.o ../movie.o ../obc1.o ../ppu.o ../reader.o ../sa1.o ../sa1cpu.o ../screenshot.o ../sdd1.o ../sdd1emu.o ../seta.o ../seta010.o ../seta011.o ../seta018.o ../snapshot.o ../snes9x.o ../spc7110.o ../srtc.o ../tile.o ../filter/2xsai.o ../filter/blit.o ../filter/epx.o ../filter/hq2x.o ../filter/snes_ntsc.o unix.o x11.o
+OBJECTS    = ../apu/apu.o ../apu/SNES_SPC.o ../apu/SNES_SPC_misc.o ../apu/SNES_SPC_state.o ../apu/SPC_DSP.o ../apu/SPC_Filter.o ../bsx.o ../c4.o ../c4emu.o ../cheats.o ../cheats2.o ../clip.o ../conffile.o ../controls.o ../cpu.o ../cpuexec.o ../cpuops.o ../crosshairs.o ../dma.o ../dsp.o ../dsp1.o ../dsp2.o ../dsp3.o ../dsp4.o ../fxinst.o ../fxemu.o ../gfx.o ../globals.o ../logger.o ../memmap.o ../movie.o ../obc1.o ../ppu.o ../reader.o ../sa1.o ../sa1cpu.o ../screenshot.o ../sdd1.o ../sdd1emu.o ../seta.o ../seta010.o ../seta011.o ../seta018.o ../snapshot.o ../snes9x.o ../spc7110.o ../srtc.o ../tile.o ../filter/2xsai.o ../filter/blit.o ../filter/epx.o ../filter/hq2x.o ../filter/snes_ntsc.o unix.o pepper.o nacl.o
 DEFS       = -DMITSHM
 
 ifdef S9XDEBUGGER
@@ -33,6 +33,7 @@
 
 CCFLAGS    = @S9XFLGS@ @S9XDEFS@ $(DEFS)
 CFLAGS     = $(CCFLAGS)
+LFLAGS     =
 
 .SUFFIXES: .o .cpp .c .cc .h .m .i .s .obj
 
@@ -47,7 +48,7 @@
 	exit 1
 
 snes9x: $(OBJECTS)
-	$(CCC) $(INCLUDES) -o $@ $(OBJECTS) -lm @S9XLIBS@
+	$(CCC) $(INCLUDES) -o $@ $(OBJECTS) $(LFLAGS) -lm @S9XLIBS@
 
 ../jma/s9x-jma.o: ../jma/s9x-jma.cpp
 	$(CCC) $(INCLUDES) -c $(CCFLAGS) -fexceptions $*.cpp -o $@
diff -Nru snes9x-1.53-src/unix/config.sub snes9x/unix/config.sub
--- snes9x-1.53-src/unix/config.sub	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/unix/config.sub	2012-01-20 02:47:19.930979347 -0800
@@ -758,6 +758,10 @@
 		basic_machine=i370-ibm
 		os=-mvs
 		;;
+	nacl*)
+		basic_machine=i686-pc
+		os=-nacl
+		;;
 	ncr3000)
 		basic_machine=i486-ncr
 		os=-sysv4
@@ -1282,7 +1286,7 @@
 	      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \
 	      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \
 	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \
-	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops*)
+	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -nacl*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	-qnx*)
diff -Nru snes9x-1.53-src/unix/configure.ac snes9x/unix/configure.ac
--- snes9x-1.53-src/unix/configure.ac	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/unix/configure.ac	2012-01-20 02:47:19.930979347 -0800
@@ -38,7 +38,7 @@
 				return (argc);
 			}
 		],
-		[snes9x_cv_option_$2="yes"], [snes9x_cv_option_$2="no"])
+		[snes9x_cv_option_$2="yes"], [snes9x_cv_option_$2="no"], [AC_MSG_RESULT(skip for crosscompiling)])
 	])
 
 	CXXFLAGS="[$]OLD_CXXFLAGS"
@@ -113,7 +113,7 @@
 AC_CACHE_VAL([snes9x_cv_linux_os],
 [
 	case "$target" in
-		*-*-linux*)
+		*-*-linux* | *-*-nacl*)
 			snes9x_cv_linux_os="yes"
 			;;
 		*)
@@ -263,7 +263,7 @@
 
 AC_PATH_XTRA
 if test "x$no_x" = "xyes"; then
-	AC_MSG_ERROR([X11 is required.])
+	AC_MSG_WARN([X11 is required.])
 else
 	S9XFLGS="$S9XFLGS $X_CFLAGS"
 	S9XLIBS="$S9XLIBS $X_PRE_LIBS -lX11 -lXext $X_LIBS $X_EXTRA_LIBS"
@@ -303,7 +303,7 @@
 			return (!(sizeof(void *) == sizeof(int)));
 		}
 	],
-	[snes9x_ptr_is_int="yes"], [snes9x_ptr_is_int="no"])
+	[snes9x_ptr_is_int="yes"], [snes9x_ptr_is_int="no"], [AC_MSG_RESULT(skip for crosscompiling)])
 	
 	if test "x$snes9x_ptr_is_int" = "xyes"; then
 		AC_MSG_RESULT(yes)
@@ -350,7 +350,7 @@
 			return (i < 0 ? 0 : 1);
 		}
 	],
-	[snes9x_sar_$1="yes"], [snes9x_sar_$1="no"])
+	[snes9x_sar_$1="yes"], [snes9x_sar_$1="no"], [AC_MSG_RESULT(skip for crosscompiling)])
 
 	CXXFLAGS="[$]OLD_CXXFLAGS"
 
diff -Nru snes9x-1.53-src/unix/unix.cpp snes9x/unix/unix.cpp
--- snes9x-1.53-src/unix/unix.cpp	2011-04-24 06:38:10.000000000 -0700
+++ snes9x/unix/unix.cpp	2012-01-20 02:47:19.930979347 -0800
@@ -198,9 +198,11 @@
 #include <sys/ioctl.h>
 #endif
 #ifndef NOSOUND
+#ifndef __native_client__
 #include <sys/soundcard.h>
 #include <sys/mman.h>
 #endif
+#endif
 #ifdef JOYSTICK_SUPPORT
 #include <linux/joystick.h>
 #endif
@@ -223,12 +225,23 @@
 #include "debug.h"
 #endif
 
+#ifdef __native_client__
+#include "nacl.h"
+#endif
+
 #ifdef NETPLAY_SUPPORT
 #ifdef _DEBUG
 #define NP_DEBUG 2
 #endif
 #endif
 
+#ifndef timercmp
+# define timercmp(a, b, CMP) 						      \
+  (((a)->tv_sec == (b)->tv_sec) ? 					      \
+   ((a)->tv_usec CMP (b)->tv_usec) : 					      \
+   ((a)->tv_sec CMP (b)->tv_sec))
+#endif
+
 typedef std::pair<std::string, std::string>	strpair_t;
 
 ConfigFile::secvec_t	keymaps;
@@ -244,12 +257,13 @@
 
 static const char	*sound_device = NULL;
 
-static const char	*s9x_base_dir        = NULL,
+static const char	*s9x_base_dir        = "/",
 					*rom_filename        = NULL,
-					*snapshot_filename   = NULL,
 					*play_smv_filename   = NULL,
 					*record_smv_filename = NULL;
 
+const char	        *snapshot_filename   = "/savestate/game.001";
+
 static char		default_dir[PATH_MAX + 1];
 
 static const char	dirNames[13][32] =
@@ -310,13 +324,6 @@
 static uint32	old_joypads[8];
 #endif
 
-bool8 S9xMapDisplayInput (const char *, s9xcommand_t *);
-s9xcommand_t S9xGetDisplayCommandT (const char *);
-char * S9xGetDisplayCommandName (s9xcommand_t);
-void S9xHandleDisplayCommand (s9xcommand_t, int16, int16);
-bool S9xDisplayPollButton (uint32, bool *);
-bool S9xDisplayPollAxis (uint32, int16 *);
-bool S9xDisplayPollPointer (uint32, int16 *, int16 *);
 
 static long log2 (long);
 static void SoundTrigger (void);
@@ -331,6 +338,8 @@
 static void ReadJoysticks (void);
 #endif
 
+bool sound_initialized = false;
+
 
 void _splitpath (const char *path, char *drive, char *dir, char *fname, char *ext)
 {
@@ -402,6 +411,22 @@
 	return (n);
 }
 
+void S9xSetPalette (void)
+{
+	return;
+}
+
+void S9xMessage (int type, int number, const char *message)
+{
+	const int	max = 36 * 3;
+	static char	buffer[max + 1];
+
+	fprintf(stdout, "%s\n", message);
+	strncpy(buffer, message, max + 1);
+	buffer[max] = 0;
+	S9xSetInfoString(buffer);
+}
+
 void S9xExtraUsage (void)
 {
 	/*                               12345678901234567890123456789012345678901234567890123456789012345678901234567890 */
@@ -436,7 +461,7 @@
 	S9xMessage(S9X_INFO, S9X_USAGE, "                                frames (use with -dumpstreams)");
 	S9xMessage(S9X_INFO, S9X_USAGE, "");
 
-	S9xExtraDisplayUsage();
+	//S9xExtraDisplayUsage();
 }
 
 void S9xParseArg (char **argv, int &i, int argc)
@@ -534,13 +559,15 @@
 	else
 	if (!strcasecmp(argv[i], "-dumpmaxframes"))
 		Settings.DumpStreamsMaxFrames = atoi(argv[++i]);
+        /*
 	else
 		S9xParseDisplayArg(argv, i, argc);
+                */
 }
 
 static void NSRTControllerSetup (void)
 {
-	if (!strncmp((const char *) Memory.NSRTHeader + 24, "NSRT", 4))
+	if (1 || !strncmp((const char *) Memory.NSRTHeader + 24, "NSRT", 4))
 	{
 		// First plug in both, they'll change later as needed
 		S9xSetController(0, CTL_JOYPAD, 0, 0, 0, 0);
@@ -679,11 +706,13 @@
 		keymaps.push_back(strpair_t("J00:B11",        "Joypad1 Start"));
 	}
 
+#ifndef __native_client__
 	std::string section = S9xParseDisplayConfig(conf, 1);
 
 	ConfigFile::secvec_t	sec = conf.GetSection((section + " Controls").c_str());
 	for (ConfigFile::secvec_t::iterator c = sec.begin(); c != sec.end(); c++)
 		keymaps.push_back(*c);
+#endif
 }
 
 static int make_snes9x_dirs (void)
@@ -792,6 +821,9 @@
 
 const char * S9xChooseFilename (bool8 read_only)
 {
+#ifdef __native_client__
+	return snapshot_filename;
+#else
 	char	s[PATH_MAX + 1];
 	char	drive[_MAX_DRIVE + 1], dir[_MAX_DIR + 1], fname[_MAX_FNAME + 1], ext[_MAX_EXT + 1];
 
@@ -807,10 +839,14 @@
 	S9xSetSoundMute(FALSE);
 
 	return (filename);
+#endif
 }
 
 const char * S9xChooseMovieFilename (bool8 read_only)
 {
+#ifdef __native_client__
+	return NULL;
+#else
 	char	s[PATH_MAX + 1];
 	char	drive[_MAX_DRIVE + 1], dir[_MAX_DIR + 1], fname[_MAX_FNAME + 1], ext[_MAX_EXT + 1];
 
@@ -826,6 +862,7 @@
 	S9xSetSoundMute(FALSE);
 
 	return (filename);
+#endif
 }
 
 bool8 S9xOpenSnapshotFile (const char *filename, bool8 read_only, STREAM *file)
@@ -864,7 +901,7 @@
 
 bool8 S9xDeinitUpdate (int width, int height)
 {
-	S9xPutImage(width, height);
+	S9xNaclDraw(width, height);
 	return (TRUE);
 }
 
@@ -1087,22 +1124,37 @@
 	return (S9xMapButton(d, *cmd, false));
 
 unrecog:
-	return (S9xMapDisplayInput(n, cmd));
+	return false;//(S9xMapDisplayInput(n, cmd));
 }
 
 bool S9xPollButton (uint32 id, bool *pressed)
 {
-	return (S9xDisplayPollButton(id, pressed));
+  return false;
 }
 
 bool S9xPollAxis (uint32 id, int16 *value)
 {
-	return (S9xDisplayPollAxis(id, value));
+  return false;
 }
 
 bool S9xPollPointer (uint32 id, int16 *x, int16 *y)
 {
-	return (S9xDisplayPollPointer(id, x, y));
+  return false;
+}
+
+static s9xcommand_t BadMapping(const char *n)
+{
+	s9xcommand_t	cmd;
+
+	cmd.type         = S9xBadMapping;
+	cmd.multi_press  = 0;
+	cmd.button_norpt = 0;
+	cmd.port[0]      = 0xff;
+	cmd.port[1]      = 0;
+	cmd.port[2]      = 0;
+	cmd.port[3]      = 0;
+
+	return (cmd);
 }
 
 s9xcommand_t S9xGetPortCommandT (const char *n)
@@ -1140,7 +1192,7 @@
 		}
 	}
 
-	return (S9xGetDisplayCommandT(n));
+	return BadMapping(n);
 }
 
 char * S9xGetPortCommandName (s9xcommand_t cmd)
@@ -1179,7 +1231,7 @@
 			break;
 	}
 
-	return (S9xGetDisplayCommandName(cmd));
+	return strdup("None");
 }
 
 void S9xHandlePortCommand (s9xcommand_t cmd, int16 data1, int16 data2)
@@ -1251,6 +1303,8 @@
 	}
 
 	keymaps.clear();
+
+  S9xNaclMapInput();
 }
 
 void S9xInitInputDevices (void)
@@ -1360,8 +1414,10 @@
 static void InitTimer (void)
 {
 #ifndef NOSOUND
+#ifndef __native_client__
 	struct itimerval	timeout;
 #endif
+#endif
 	struct sigaction	sa;
 
 #ifdef USE_THREADS
@@ -1382,6 +1438,7 @@
 #endif
 
 #ifndef NOSOUND // FIXME: Kludge to get calltree running. Remove later.
+#ifndef __native_client__
 	sigemptyset(&sa.sa_mask);
 	sigaction(SIGALRM, &sa, NULL);
 
@@ -1392,11 +1449,15 @@
 	if (setitimer(ITIMER_REAL, &timeout, NULL) < 0)
 		perror("setitimer");
 #endif
+#endif
 }
 
 bool8 S9xOpenSoundDevice (void)
 {
 #ifndef NOSOUND
+#ifdef __native_client__
+	return (TRUE);
+#else
 	int	J, K;
 
 	so.sound_fd = open(sound_device, O_WRONLY | O_NONBLOCK);
@@ -1428,12 +1489,15 @@
 #endif
 
 	return (TRUE);
+#endif
 }
 
 #ifndef NOSOUND
 
 static void * S9xProcessSound (void *)
 {
+#ifdef __native_client__
+#else
 	// If threads in use, this is to loop indefinitely.
 	// If not, this will be called by timer.
 
@@ -1507,6 +1571,7 @@
 #ifdef USE_THREADS
 	} while (unixSettings.ThreadSound);
 #endif
+#endif
 
 	return (NULL);
 }
@@ -1530,7 +1595,9 @@
 	S9xResetSaveTimer(FALSE);
 
 	S9xUnmapAllControls();
+#ifndef __native_client__
 	S9xDeinitDisplay();
+#endif
 	Memory.Deinit();
 	S9xDeinitAPU();
 
@@ -1545,7 +1612,11 @@
 }
 #endif
 
+#ifdef __native_client__
+int original_main (int argc, char **argv)
+#else
 int main (int argc, char **argv)
+#endif
 {
 	if (argc < 2)
 		S9xUsage();
@@ -1553,7 +1624,6 @@
 	printf("\n\nSnes9x " VERSION " for unix\n");
 
 	snprintf(default_dir, PATH_MAX + 1, "%s%s%s", getenv("HOME"), SLASH_STR, ".snes9x");
-	s9x_base_dir = default_dir;
 
 	ZeroMemory(&Settings, sizeof(Settings));
 	Settings.MouseMaster = TRUE;
@@ -1564,9 +1634,10 @@
 	Settings.FrameTimeNTSC = 16667;
 	Settings.SixteenBitSound = TRUE;
 	Settings.Stereo = TRUE;
-	Settings.SoundPlaybackRate = 32000;
+	Settings.SoundPlaybackRate = 44100; // try 32000 first
 	Settings.SoundInputRate = 32000;
 	Settings.SupportHiRes = TRUE;
+        Settings.SoundSync = TRUE;
 	Settings.Transparency = TRUE;
 	Settings.AutoDisplayMessages = TRUE;
 	Settings.InitialInfoStringTimeout = 120;
@@ -1598,8 +1669,7 @@
 
 	CPU.Flags = 0;
 
-	S9xLoadConfigFiles(argv, argc);
-	rom_filename = S9xParseArgs(argv, argc);
+	rom_filename = S9xParseArgs(const_cast<char**>(argv), argc);
 
 	make_snes9x_dirs();
 
@@ -1611,7 +1681,7 @@
 		exit(1);
 	}
 
-	S9xInitSound(unixSettings.SoundBufferSize, 0);
+	sound_initialized = S9xInitSound(unixSettings.SoundBufferSize, 0);
 	S9xSetSoundMute(TRUE);
 
 	S9xReportControllers();
@@ -1707,9 +1777,7 @@
 #endif
 
 	S9xInitInputDevices();
-	S9xInitDisplay(argc, argv);
 	S9xSetupDefaultKeymap();
-	S9xTextMode();
 
 #ifdef NETPLAY_SUPPORT
 	if (strlen(Settings.ServerName) == 0)
@@ -1758,6 +1826,7 @@
 			exit(1);
 		CPU.Flags |= flags;
 	}
+#ifndef __native_client__
 	else
 	if (snapshot_filename)
 	{
@@ -1766,11 +1835,9 @@
 			exit(1);
 		CPU.Flags |= flags;
 	}
-
-	S9xGraphicsMode();
+#endif
 
 	sprintf(String, "\"%s\" %s: %s", Memory.ROMName, TITLE, VERSION);
-	S9xSetTitle(String);
 
 #ifdef JOYSTICK_SUPPORT
 	uint32	JoypadSkip = 0;
@@ -1790,7 +1857,9 @@
 		{
 			if (NetPlay.PendingWait4Sync && !S9xNPWaitForHeartBeatDelay(100))
 			{
+#ifndef __native_client__
 				S9xProcessEvents(FALSE);
+#endif
 				continue;
 			}
 
